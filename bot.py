import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import sqlite3
from config import BOT_TOKEN, PAYMENT_DETAILS, ADMIN_ID

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# --- Database ---
conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    name TEXT,
    phone TEXT,
    address TEXT,
    subscription INTEGER DEFAULT 0,
    status TEXT DEFAULT 'inactive'
)""")
conn.commit()


# --- Keyboards ---
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"))
main_kb.add(KeyboardButton("üìÖ –ú–æ–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"))
main_kb.add(KeyboardButton("üí≥ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É"))

sub_kb = ReplyKeyboardMarkup(resize_keyboard=True)
sub_kb.add("5 –æ–±–µ–¥–æ–≤ - 1750‚ÇΩ", "10 –æ–±–µ–¥–æ–≤ - 3500‚ÇΩ")
sub_kb.add("15 –æ–±–µ–¥–æ–≤ - 5250‚ÇΩ", "20 –æ–±–µ–¥–æ–≤ - 7000‚ÇΩ")
sub_kb.add("üîô –ù–∞–∑–∞–¥")


# --- Handlers ---
@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    cursor.execute("SELECT * FROM users WHERE user_id=?", (message.from_user.id,))
    user = cursor.fetchone()
    if not user:
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è.
–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        cursor.execute("INSERT INTO users (user_id) VALUES (?)", (message.from_user.id,))
        conn.commit()
        return
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_kb)


@dp.message_handler(lambda m: m.text and m.text.startswith("üì¶"))
async def subscribe(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=sub_kb)


@dp.message_handler(lambda m: m.text in [
    "5 –æ–±–µ–¥–æ–≤ - 1750‚ÇΩ", "10 –æ–±–µ–¥–æ–≤ - 3500‚ÇΩ",
    "15 –æ–±–µ–¥–æ–≤ - 5250‚ÇΩ", "20 –æ–±–µ–¥–æ–≤ - 7000‚ÇΩ"
])
async def set_subscription(message: types.Message):
    subs = {
        "5 –æ–±–µ–¥–æ–≤ - 1750‚ÇΩ": (5, 1750),
        "10 –æ–±–µ–¥–æ–≤ - 3500‚ÇΩ": (10, 3500),
        "15 –æ–±–µ–¥–æ–≤ - 5250‚ÇΩ": (15, 5250),
        "20 –æ–±–µ–¥–æ–≤ - 7000‚ÇΩ": (20, 7000),
    }
    count, price = subs[message.text]
    cursor.execute("UPDATE users SET subscription=?, status=? WHERE user_id=?",
                   (count, "waiting_payment", message.from_user.id))
    conn.commit()
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {count} –æ–±–µ–¥–æ–≤ –∑–∞ {price}‚ÇΩ.
"
                         f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:
{PAYMENT_DETAILS}

"
                         f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ ¬´üí≥ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª",
                         reply_markup=main_kb)


@dp.message_handler(lambda m: m.text == "üí≥ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É")
async def confirm_payment(message: types.Message):
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞.")
    # –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - –ª–æ–≤–∏–º —Ñ–æ—Ç–æ


@dp.message_handler(content_types=["photo"])
async def handle_photo(message: types.Message):
    cursor.execute("UPDATE users SET status=? WHERE user_id=?",
                   ("payment_check", message.from_user.id))
    conn.commit()
    await message.photo[-1].download(f"check_{message.from_user.id}.jpg")
    await message.answer("‚úÖ –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
    await bot.send_message(ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –æ—Ç–ø—Ä–∞–≤–∏–ª —á–µ–∫.")
    await bot.send_photo(ADMIN_ID, message.photo[-1].file_id)


@dp.message_handler(commands=["admin"])
async def admin_panel(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    cursor.execute("SELECT * FROM users")
    users = cursor.fetchall()
    text = "üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
"
    for u in users:
        text += f"ID: {u[0]}, –ò–º—è: {u[1]}, –ü–æ–¥–ø–∏—Å–∫–∞: {u[4]}, –°—Ç–∞—Ç—É—Å: {u[5]}
"
    await message.answer(text)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
